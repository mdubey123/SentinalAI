# SentinelAI v2 - Docker Compose Configuration
# Production-ready deployment with all services

version: '3.8'

services:
  # Main SentinelAI application
  sentinelai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sentinelai-app
    ports:
      - "8501:8501"
    volumes:
      # Persistent data
      - sentinelai_data:/app/data
      - sentinelai_logs:/app/logs
      - sentinelai_reports:/app/reports
      - sentinelai_cache:/app/cache
      - sentinelai_config:/app/config
      # Mount host directories for scanning (optional)
      - /var/log:/host/var/log:ro
      - /tmp:/host/tmp:ro
    env_file:
      - docker.env.example
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
      # LLM Provider Environment Variables (optional - can be set via UI)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - COHERE_API_KEY=${COHERE_API_KEY:-}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY:-}
      - LLAMA_API_KEY=${LLAMA_API_KEY:-}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY:-}
      # Application settings
      - SENTINELAI_ENV=production
      - LOG_LEVEL=INFO
    restart: unless-stopped
    depends_on:
      - clamav
    networks:
      - sentinelai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ClamAV antivirus engine
  clamav:
    image: clamav/clamav:stable
    container_name: sentinelai-clamav
    volumes:
      - clamav_data:/var/lib/clamav
    environment:
      - CLAMAV_NO_FRESHCLAM=false
    restart: unless-stopped
    networks:
      - sentinelai-network
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: sentinelai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - sentinelai-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: sentinelai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - sentinelai
    restart: unless-stopped
    networks:
      - sentinelai-network

# Named volumes for persistent data
volumes:
  sentinelai_data:
    driver: local
  sentinelai_logs:
    driver: local
  sentinelai_reports:
    driver: local
  sentinelai_cache:
    driver: local
  sentinelai_config:
    driver: local
  clamav_data:
    driver: local
  redis_data:
    driver: local

# Network configuration
networks:
  sentinelai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

